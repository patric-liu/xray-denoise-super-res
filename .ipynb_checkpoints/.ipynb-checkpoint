{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "# import\n",
    "import getdata\n",
    "import pickle\n",
    "import numpy as np \n",
    "import autoencoder as model\n",
    "import matplotlib.pyplot as plt\n",
    "import scipy.ndimage\n",
    "import cv2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# load training data\n",
    "train_x, train_y = getdata.get_training(flatten = False, rescale = True, denoise_only = True)\n",
    "test_data = getdata.get_test(flatten = True, amount = 100, rescale = True) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# show images if flatten = True\n",
    "n=0\n",
    "for data in train_x[n:n+2]:\n",
    "    size = int(np.shape(data)[0]**(1/2))\n",
    "    plt.imshow(data.reshape(size,size), cmap = 'Greys')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# show images if flatten = False\n",
    "n=0\n",
    "for data in train_y[n:n+4]:\n",
    "    data = data[:,:,0]\n",
    "    plt.imshow(data, cmap = 'Greys')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "finished building autoencoder\n"
     ]
    }
   ],
   "source": [
    "# create network architecture\n",
    "# test 0 is autoencoder\n",
    "# test 1 is small convolutional network\n",
    "# test 2 is large convolutional network\n",
    "# Since we are using a large convolutional network, do not adjust the following line:\n",
    "autoencoder = model.Autoencoder([(64,64,1)], 4096, [(64,64,1)], test = 2)\n",
    "print(\"finished building autoencoder\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "16000/16000 [==============================] - 215s 13ms/step - loss: 5.0976e-04\n",
      "Epoch 2/10\n",
      "16000/16000 [==============================] - 192s 12ms/step - loss: 5.0630e-04\n",
      "Epoch 3/10\n",
      "16000/16000 [==============================] - 187s 12ms/step - loss: 4.9401e-04\n",
      "Epoch 4/10\n",
      "16000/16000 [==============================] - 191s 12ms/step - loss: 4.9662e-04\n",
      "Epoch 5/10\n",
      "16000/16000 [==============================] - 209s 13ms/step - loss: 5.0230e-04\n",
      "Epoch 6/10\n",
      "16000/16000 [==============================] - 193s 12ms/step - loss: 4.9245e-04\n",
      "Epoch 7/10\n",
      "16000/16000 [==============================] - 198s 12ms/step - loss: 4.8299e-04\n",
      "Epoch 8/10\n",
      "16000/16000 [==============================] - 190s 12ms/step - loss: 4.8632e-04\n",
      "Epoch 9/10\n",
      "16000/16000 [==============================] - 191s 12ms/step - loss: 4.8388e-04\n",
      "Epoch 10/10\n",
      "16000/16000 [==============================] - 200s 12ms/step - loss: 4.9323e-04\n"
     ]
    }
   ],
   "source": [
    "# (1) #\n",
    "# TRAIN THE AUTOENCODER NORMALLY\n",
    "autoencoder.train(train_x,train_y, epochs = 10, verbose = 1, loss = 'mean_squared_error', optimizer= 'adadelta', batch_size = 10)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "autoencoder.matrix.get_weights()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TEST ON CUSTOM FLAT\n",
    "\n",
    "# load and show custom image\n",
    "user_array = scipy.ndimage.imread('train.png', flatten=True, mode=None)\n",
    "user_array = 1-(user_array/225)\n",
    "shape = np.shape(user_array)\n",
    "imgplot = plt.imshow(user_array, cmap = 'Greys')\n",
    "plt.show()\n",
    "# compute and show reconstruction\n",
    "input_vector = user_array.flatten()\n",
    "output_vector = autoencoder.predict(np.array([input_vector, input_vector]))[0]\n",
    "output_array = output_vector.reshape(64,64)\n",
    "imgplot = plt.imshow(output_array, cmap = 'Greys')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/patricliu/miniconda3/envs/ml_env/lib/python3.5/site-packages/ipykernel_launcher.py:4: DeprecationWarning: `imread` is deprecated!\n",
      "`imread` is deprecated in SciPy 1.0.0.\n",
      "Use ``matplotlib.pyplot.imread`` instead.\n",
      "  after removing the cwd from sys.path.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/patricliu/miniconda3/envs/ml_env/lib/python3.5/site-packages/ipykernel_launcher.py:8: DeprecationWarning: `imread` is deprecated!\n",
      "`imread` is deprecated in SciPy 1.0.0.\n",
      "Use ``matplotlib.pyplot.imread`` instead.\n",
      "  \n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/patricliu/miniconda3/envs/ml_env/lib/python3.5/site-packages/ipykernel_launcher.py:14: DeprecationWarning: Both axis > a.ndim and axis < -a.ndim - 1 are deprecated and will raise an AxisError in the future.\n",
      "  \n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# TEST ON CUSTOM 2D\n",
    "num = 5\n",
    "# load and show custom image\n",
    "user_array = scipy.ndimage.imread('x' + str(num) + '.png', flatten=True, mode=None)\n",
    "user_array = 1-(user_array/225)\n",
    "imgplot = plt.imshow(user_array, cmap = 'Greys')\n",
    "plt.show()\n",
    "target = scipy.ndimage.imread('y'+ str(num) + '.png', flatten=True, mode=None)\n",
    "target = 1-(target/225)\n",
    "target = cv2.resize(target,(64,64))\n",
    "imgplot = plt.imshow(target, cmap = 'Greys')\n",
    "plt.show()\n",
    "# compute and show reconstruction\n",
    "input_vector = np.expand_dims(user_array, axis = 3)\n",
    "output_vector = autoencoder.predict(np.array([input_vector, input_vector]))[0]\n",
    "output_array = output_vector[:,:,0]\n",
    "imgplot = plt.imshow(output_array, cmap = 'Greys')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# (2) #\n",
    "# INCREMENTALY TEST ON MNIST DATA\n",
    "import mnist_loader\n",
    "# load training data\n",
    "num_digits = 10\n",
    "val_data = np.array(list(map(lambda x: np.squeeze(x), np.array(list(validation_data))[:,0])))\n",
    "np.random.shuffle(val_data)\n",
    "val_data = val_data[0:num_digits]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# TRAIN AUTOENCODER AND PRINT RESULT\n",
    "epochs = 20\n",
    "\n",
    "plt.figure(figsize=(2*num_digits, 4))\n",
    "for i in range(num_digits):\n",
    "    # display original\n",
    "    ax = plt.subplot(2, num_digits, i + 1)\n",
    "    plt.imshow(val_data[i].reshape(28, 28))\n",
    "    plt.gray()\n",
    "    ax.get_xaxis().set_visible(False)\n",
    "    ax.get_yaxis().set_visible(False)\n",
    "plt.show()\n",
    "\n",
    "for epoch in range(epochs):\n",
    "    model.train(training_data, test_data, epochs = 1, verbose = 0)\n",
    "    predicted_imgs = autoencoder.predict(val_data)\n",
    "    # copypasta code to display digits\n",
    "    plt.figure(figsize=(2*num_digits, 4))\n",
    "    for i in range(num_digits):\n",
    "        # display reconstruction\n",
    "        ax = plt.subplot(2, num_digits, i + 1 + num_digits)\n",
    "        plt.imshow(predicted_imgs[i].reshape(28, 28))\n",
    "        plt.gray()\n",
    "        ax.get_xaxis().set_visible(False)\n",
    "        ax.get_yaxis().set_visible(False)\n",
    "    plt.show()\n",
    "\n",
    "plt.figure(figsize=(2*num_digits, 4))\n",
    "for i in range(num_digits):\n",
    "    # display original\n",
    "    ax = plt.subplot(2, num_digits, i + 1)\n",
    "    plt.imshow(val_data[i].reshape(28, 28))\n",
    "    plt.gray()\n",
    "    ax.get_xaxis().set_visible(False)\n",
    "    ax.get_yaxis().set_visible(False)\n",
    "plt.show()\n",
    "    \n",
    "print(\"finished training!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# SAVE MODEL\n",
    "\n",
    "import os\n",
    "from keras.models import model_from_json\n",
    "save_path = os.getcwd() + '/model_weights/model_v3.h5'\n",
    "\n",
    "autoencoder.autoencoder.save_weights(save_path)\n",
    "with open(os.getcwd() + '/model_weights/model_architecture3.json', 'w') as f:\n",
    "    f.write(autoencoder.autoencoder.to_json())"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
